#line 2 "mysql.lex.cpp"

#line 4 "mysql.lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 83
#define YY_END_OF_BUFFER 84
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[300] =
    {   0,
        0,    0,    0,    0,    0,    0,   84,   82,   81,   81,
       64,   82,   76,   64,   64,   82,   64,   64,   64,   49,
       49,   71,   67,   69,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   82,   64,   80,   80,   73,   72,
        0,   61,   59,    0,   76,   65,    0,   60,   58,    0,
        0,   51,   78,   50,   49,    0,    0,    0,   70,   68,
       73,   73,   73,   73,    6,   73,   73,   11,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   23,   73,
       73,   73,   73,   73,   73,   35,   36,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,    0,   75,
        0,   66,   79,   73,    0,    0,   59,    0,    0,    0,
       58,    0,   77,    0,   50,    0,   63,    0,   52,   62,
        1,    2,    4,    5,    7,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   27,   73,   30,   73,   73,   33,   34,   73,
       73,   73,   73,   41,   73,   73,   73,   73,   73,   73,
       46,   73,   73,   74,    3,    0,   59,    0,   58,   77,
        0,   54,    0,   53,   73,   73,   73,   12,   73,   73,
       73,   73,   17,   73,   73,   20,   73,   73,   22,   73,

       73,   27,   32,   73,   28,   29,   31,   73,   73,   73,
       73,   73,   43,   55,   73,   73,   73,   73,   73,    0,
        0,    0,    0,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   57,   21,   24,   73,   73,   73,   37,
       73,   73,   73,   42,   73,   73,   73,   47,   48,   73,
        9,   73,   73,   13,   73,   73,   16,   73,   19,   21,
       73,   26,   73,   73,   73,   40,   44,   73,   45,   47,
       73,   10,   73,   73,   15,   73,   73,   27,   38,   73,
       56,   73,   73,   14,   18,   73,   73,   73,   12,   73,
       39,   73,   73,   73,   25,   73,   73,    8,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,    7,
        7,   10,   11,    7,   12,   13,   14,   15,   16,   17,
       17,   18,   17,   17,   17,   19,   17,    1,    7,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,   49,    1,    1,   50,   51,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   48,    1,   77,    1,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[78] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    3,    3,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    1,    4,
        5,    3,    3,    3,    3,    3,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1
    } ;

static yyconst flex_int16_t yy_base[315] =
    {   0,
        0,    0,  472,  471,   55,   56,  474,  743,  743,  743,
      445,   77,    0,  743,  378,   78,  370,   73,  354,  115,
       82,  331,  743,  327,   80,   90,   53,  117,    0,  113,
       48,   49,   69,  118,   92,  104,  120,  111,  132,  135,
      152,  157,  144,  142,  196,  181,  743,  224,  171,  743,
      115,  743,  232,  197,    0,  743,  208,  743,  211,  210,
      179,  213,  743,  233,  248,   87,  261,    0,  743,  743,
        0,  148,  153,  168,  181,  176,  197,    0,  210,  215,
      211,  253,  214,  213,  233,  240,  246,  249,  254,  257,
      244,  259,  257,  271,  256,    0,  274,  270,  274,  271,

      282,  261,  265,  278,  288,  291,  294,  305,  336,  743,
      121,  743,  743,  307,  114,  341,  348,  353,  332,  356,
      357,  360,    0,  356,  361,  396,   89,  376,  403,    0,
        0,    0,    0,    0,    0,  318,  333,  351,  358,  377,
      378,  380,  377,  385,  374,  399,  386,  385,  405,  396,
      407,  408,  419,  400,    0,  413,  412,    0,    0,  415,
      408,  417,  420,    0,  414,  407,  423,  412,  418,  435,
        0,  416,  421,  743,    0,  340,  457,  458,  459,    0,
      476,  481,  486,  494,   44,  446,  462,  491,  474,  493,
      476,  478,    0,  490,  488,    0,  496,  482,    0,  485,

      490,    0,    0,  498,    0,    0,    0,  488,  506,  491,
      507,  506,    0,    0,  491,  498,  494,  510,  511,  534,
      535,  532,  533,  513,  520,  541,  544,  543,  548,  538,
      547,  539,  550,    0,   92,    0,  537,  537,  553,    0,
      545,  559,  545,    0,  561,  544,  563,  550,    0,  556,
        0,  557,  552,    0,  554,  554,    0,  577,    0,    0,
      574,    0,  570,  564,  576,    0,    0,  577,    0,    0,
      601,    0,  600,  601,    0,  587,  588,    0,    0,  607,
        0,  593,  595,    0,    0,  605,  610,  611,    0,  599,
        0,  609,  618,  619,    0,  611,  606,    0,  743,  677,

      682,  687,  692,  695,  699,  703,  708,   82,  713,  717,
      722,  727,  732,  737
    } ;

static yyconst flex_int16_t yy_def[315] =
    {   0,
      299,    1,  300,  300,    1,    1,  299,  299,  299,  299,
      299,  301,  302,  299,  299,  303,  299,  299,  299,  299,
      299,  299,  299,  299,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  305,  299,  299,  299,  304,  299,
      301,  299,  299,  306,  302,  299,  303,  299,  299,  307,
      299,  299,  299,  299,  299,  299,  299,  308,  299,  299,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,

      304,  304,  304,  304,  304,  304,  304,  304,  305,  299,
      309,  299,  299,  304,  310,  301,  301,  306,  311,  303,
      303,  307,  312,  299,  299,  299,  299,  299,  299,  308,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  299,  304,  313,  310,  314,  311,  312,
      299,  299,  299,  299,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,

      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  310,
      313,  311,  314,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,    0,  299,

      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299
    } ;

static yyconst flex_int16_t yy_nxt[821] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   14,
       14,   17,   18,   19,   20,   21,   21,   21,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   29,   29,
       31,   32,   33,   34,   35,   36,   37,   38,   29,   39,
       40,   41,   42,   43,   44,   29,   29,   29,    8,    8,
       45,   25,   26,   27,   28,   29,   30,   29,   29,   31,
       32,   33,   34,   35,   36,   37,   38,   29,   39,   40,
       41,   42,   43,   44,   29,   29,   46,   49,   49,   52,
       58,   53,   79,   89,  130,   90,   59,   62,   62,   62,
       62,   62,   80,  224,   64,   91,   65,   65,   65,   65,

       65,  127,  127,  127,  127,   72,   49,   49,   67,  260,
      259,   79,   89,   73,   90,   74,   77,   52,   53,   53,
       75,   80,   76,  110,   91,   54,   60,   64,   94,   65,
       65,   65,   65,   65,   72,   86,   78,   67,   66,   81,
       95,   67,   73,   82,   74,   77,   87,   83,   92,   75,
       98,   76,   88,   84,   93,   96,   85,   94,   99,   97,
       68,  100,  176,   54,   86,   78,  107,   66,   81,   95,
       67,  108,   82,  131,  101,   87,   83,   92,  102,   98,
      123,   88,   84,   93,   96,   85,  132,   99,   97,   68,
      100,  103,  104,  133,  105,  107,   72,  106,  110,   52,

      108,  117,  131,  101,   73,  135,  114,  102,  111,  111,
       58,   75,   58,   76,  134,  132,   59,  136,  121,  119,
      103,  104,  133,  105,  137,   72,  106,   62,   62,   62,
       62,   62,  139,   73,  135,  114,  115,  113,  138,  124,
       75,  140,   76,  134,  111,  118,  136,  125,  125,  125,
      125,  125,  141,  137,  145,  146,   60,  112,  122,  126,
       64,  139,   65,   65,   65,   65,   65,  138,  124,  147,
      140,  128,  128,  148,   67,  129,  129,  129,  129,  129,
      142,  141,  149,  145,  146,  150,  143,  154,  126,  151,
      155,  156,  157,  144,  152,  153,  158,  159,  147,  160,

      161,  162,  148,   67,  163,  165,  166,  167,  168,  142,
      169,  149,  164,  170,  150,  143,  154,  171,  151,  155,
      156,  157,  144,  152,  153,  158,  159,  172,  160,  161,
      162,  173,  175,  163,  165,  166,  167,  168,  110,  169,
       59,  164,  170,   52,  177,   53,  171,   70,  111,  111,
       52,   69,  177,  134,  185,   52,  172,  117,   58,   58,
      173,  175,   58,   63,   59,  179,  181,  181,  121,  186,
      182,  182,  182,  182,  182,  125,  125,  125,  125,  125,
      178,   61,  134,  185,  111,   56,  174,  126,  221,   54,
      129,  129,  129,  129,  129,  187,   54,  188,  186,  189,

      190,  118,  191,  192,   60,   60,  183,  183,  122,  193,
      184,  184,  184,  184,  184,  194,  126,  129,  129,  129,
      129,  129,  195,  196,  187,  197,  188,  198,  189,  190,
      199,  191,  192,  200,  201,  206,  202,  203,  193,  207,
      203,  208,  209,  210,  194,  204,  211,  212,  213,  214,
      215,  195,  196,  216,  197,  205,  198,  217,  218,  199,
      219,  177,  200,  201,  206,   50,  179,  179,  207,  203,
      208,  209,  210,  299,  204,  211,  212,  213,  214,  215,
       48,   48,  216,  299,  205,  225,  217,  218,  226,  219,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,

      184,  184,  184,  184,  184,  176,  223,  178,  184,  184,
      184,  184,  184,  227,  225,  228,  229,  226,  230,  231,
      232,  233,  234,  235,  236,  237,  239,  240,  241,  238,
      242,  243,  244,  245,  246,  247,  248,  249,   53,  177,
       59,  179,  227,  250,  228,  229,  251,  230,  231,  232,
      233,  234,  235,  236,  237,  239,  240,  241,  238,  242,
      243,  244,  245,  246,  247,  248,  249,  252,  253,  254,
      255,  256,  250,  257,  258,  251,  259,  261,  262,  263,
      178,  223,  176,  221,  264,  265,  266,  267,  268,  269,
      270,  271,  272,  273,  274,  275,  252,  253,  254,  255,

      256,  276,  257,  258,  277,  259,  261,  262,  263,  278,
      279,  280,  281,  264,  265,  266,  267,  268,  269,  270,
      271,  272,  273,  274,  275,  282,  283,  284,  285,  286,
      276,  287,  288,  277,  289,  290,  291,  292,  278,  279,
      280,  281,  293,  294,  295,  296,  297,  298,  299,  299,
      299,  299,  299,  299,  282,  283,  284,  285,  286,  299,
      287,  288,  299,  289,  290,  291,  292,  299,  299,  299,
      299,  293,  294,  295,  296,  297,  298,   47,   47,   47,
       47,   47,   51,   51,   51,   51,   51,   55,  299,   55,
       55,   55,   57,   57,   57,   57,   57,   71,   71,  109,

      109,  109,  109,  116,  116,  116,  116,  116,  120,  120,
      120,  120,  120,  111,  111,  111,  111,  115,  299,  115,
      115,  115,  119,  299,  119,  119,  119,  180,  299,  180,
      180,  180,  220,  299,  220,  220,  220,  222,  299,  222,
      222,  222,    7,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,

      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299
    } ;

static yyconst flex_int16_t yy_chk[821] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    6,   12,
       16,   12,   27,   31,  308,   32,   16,   18,   18,   18,
       18,   18,   27,  185,   21,   33,   21,   21,   21,   21,

       21,   66,   66,  127,  127,   25,    5,    6,   21,  235,
      235,   27,   31,   25,   32,   25,   26,   51,  115,   51,
       25,   27,   25,  111,   33,   12,   16,   20,   35,   20,
       20,   20,   20,   20,   25,   30,   26,   21,   20,   28,
       36,   20,   25,   28,   25,   26,   30,   28,   34,   25,
       38,   25,   30,   28,   34,   37,   28,   35,   39,   37,
       20,   40,  115,   51,   30,   26,   43,   20,   28,   36,
       20,   44,   28,   72,   41,   30,   28,   34,   41,   38,
       61,   30,   28,   34,   37,   28,   73,   39,   37,   20,
       40,   41,   42,   74,   42,   43,   49,   42,   45,   54,

       44,   54,   72,   41,   49,   75,   49,   41,   45,   45,
       57,   49,   60,   49,   74,   73,   57,   76,   60,   59,
       41,   42,   74,   42,   77,   49,   42,   62,   62,   62,
       62,   62,   79,   49,   75,   49,   53,   48,   77,   62,
       49,   80,   49,   74,   45,   54,   76,   64,   64,   64,
       64,   64,   81,   77,   83,   84,   57,   46,   60,   64,
       65,   79,   65,   65,   65,   65,   65,   77,   62,   85,
       80,   67,   67,   86,   65,   67,   67,   67,   67,   67,
       82,   81,   87,   83,   84,   88,   82,   90,   64,   89,
       91,   92,   93,   82,   89,   89,   94,   95,   85,   97,

       98,   99,   86,   65,  100,  101,  102,  103,  104,   82,
      104,   87,  100,  105,   88,   82,   90,  106,   89,   91,
       92,   93,   82,   89,   89,   94,   95,  107,   97,   98,
       99,  108,  114,  100,  101,  102,  103,  104,  109,  104,
      119,  100,  105,  116,  176,  116,  106,   24,  109,  109,
      117,   22,  117,  114,  136,  118,  107,  118,  120,  121,
      108,  114,  122,   19,  120,  121,  124,  124,  122,  137,
      124,  124,  124,  124,  124,  125,  125,  125,  125,  125,
      119,   17,  114,  136,  109,   15,  109,  125,  176,  116,
      128,  128,  128,  128,  128,  138,  117,  139,  137,  140,

      141,  118,  142,  143,  120,  121,  126,  126,  122,  144,
      126,  126,  126,  126,  126,  145,  125,  129,  129,  129,
      129,  129,  146,  147,  138,  148,  139,  149,  140,  141,
      150,  142,  143,  151,  152,  154,  153,  153,  144,  156,
      157,  160,  161,  162,  145,  153,  163,  165,  166,  167,
      168,  146,  147,  169,  148,  153,  149,  170,  172,  150,
      173,  177,  151,  152,  154,   11,  178,  179,  156,  157,
      160,  161,  162,    7,  153,  163,  165,  166,  167,  168,
        4,    3,  169,    0,  153,  186,  170,  172,  187,  173,
      181,  181,  181,  181,  181,  182,  182,  182,  182,  182,

      183,  183,  183,  183,  183,  177,  178,  179,  184,  184,
      184,  184,  184,  188,  186,  189,  190,  187,  191,  192,
      194,  195,  197,  198,  200,  201,  204,  208,  209,  201,
      210,  211,  212,  215,  216,  217,  218,  219,  220,  221,
      222,  223,  188,  224,  189,  190,  225,  191,  192,  194,
      195,  197,  198,  200,  201,  204,  208,  209,  201,  210,
      211,  212,  215,  216,  217,  218,  219,  226,  227,  228,
      229,  230,  224,  231,  232,  225,  233,  237,  238,  239,
      222,  223,  220,  221,  241,  242,  243,  245,  246,  247,
      248,  250,  252,  253,  255,  256,  226,  227,  228,  229,

      230,  258,  231,  232,  261,  233,  237,  238,  239,  263,
      264,  265,  268,  241,  242,  243,  245,  246,  247,  248,
      250,  252,  253,  255,  256,  271,  273,  274,  276,  277,
      258,  280,  282,  261,  283,  286,  287,  288,  263,  264,
      265,  268,  290,  292,  293,  294,  296,  297,    0,    0,
        0,    0,    0,    0,  271,  273,  274,  276,  277,    0,
      280,  282,    0,  283,  286,  287,  288,    0,    0,    0,
        0,  290,  292,  293,  294,  296,  297,  300,  300,  300,
      300,  300,  301,  301,  301,  301,  301,  302,    0,  302,
      302,  302,  303,  303,  303,  303,  303,  304,  304,  305,

      305,  305,  305,  306,  306,  306,  306,  306,  307,  307,
      307,  307,  307,  309,  309,  309,  309,  310,    0,  310,
      310,  310,  311,    0,  311,  311,  311,  312,    0,  312,
      312,  312,  313,    0,  313,  313,  313,  314,    0,  314,
      314,  314,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,

      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[84] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "mysql.l"
#define YY_NO_INPUT 1
#line 3 "mysql.l"
#include "sqlfuncs.h"
#include "mysql.tab.h"
#include <stdarg.h>
#include <string.h>
#include <stdlib.h>
void yyerror(char *s, ...);
int oldstate;
 

#line 771 "mysql.lex.cpp"

#define INITIAL 0
#define COMMENT 1
#define BTWMODE 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 15 "mysql.l"


#line 956 "mysql.lex.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 300 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 743 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 17 "mysql.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 18 "mysql.l"
{ return ALL; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 19 "mysql.l"
{ BEGIN INITIAL; return AND; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 20 "mysql.l"
{ return ANDOP; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 21 "mysql.l"
{ return ANY; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 22 "mysql.l"
{ return AS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 23 "mysql.l"
{ return ASC; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 24 "mysql.l"
{ return AUTO_INCREMENT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 25 "mysql.l"
{ return BEFORE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 26 "mysql.l"
{ BEGIN BTWMODE; return BETWEEN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 27 "mysql.l"
{ return BY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 28 "mysql.l"
{ return CHAR; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 29 "mysql.l"
{ return CREATE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 30 "mysql.l"
{ return DATABASE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 31 "mysql.l"
{ return DEFAULT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 32 "mysql.l"
{ return DELETE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 33 "mysql.l"
{ return DESC; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 34 "mysql.l"
{ return DISTINCT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 35 "mysql.l"
{ return DOUBLE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 36 "mysql.l"
{ return DROP; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 37 "mysql.l"
{ return FLOAT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 38 "mysql.l"
{ return FROM; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 39 "mysql.l"
{ return IN; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 40 "mysql.l"
{ return INNER; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 41 "mysql.l"
{ return INSENSITIVE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 42 "mysql.l"
{ return INSERT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 43 "mysql.l"
{ return INT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 44 "mysql.l"
{ return INTO; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 45 "mysql.l"
{ return JOIN; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 46 "mysql.l"
{ return KEY; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 47 "mysql.l"
{ return LIKE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 48 "mysql.l"
{ return LONG; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 49 "mysql.l"
{ return MOD; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 50 "mysql.l"
{ return NOT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 51 "mysql.l"
{ return ON; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 52 "mysql.l"
{ return OR; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 53 "mysql.l"
{ return ORDER; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 54 "mysql.l"
{ return PRIMARY; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 55 "mysql.l"
{ return REFERENCE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 56 "mysql.l"
{ return SELECT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 57 "mysql.l"
{ return SET; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 58 "mysql.l"
{ return TABLE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 59 "mysql.l"
{ return TEXT; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 60 "mysql.l"
{ return UNIQUE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 61 "mysql.l"
{ return UPDATE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 62 "mysql.l"
{ return USE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 63 "mysql.l"
{ return VALUES; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 64 "mysql.l"
{ return WHERE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 66 "mysql.l"
{ yylval.intval = atol(yytext); return INTNUM; }
	YY_BREAK
case 50:
#line 68 "mysql.l"
case 51:
#line 69 "mysql.l"
case 52:
#line 70 "mysql.l"
case 53:
#line 71 "mysql.l"
case 54:
YY_RULE_SETUP
#line 71 "mysql.l"
{ yylval.floatval = atof(yytext); return APPROXNUM; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 73 "mysql.l"
{ yylval.intval = 1; return BOOL; } 
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 74 "mysql.l"
{ yylval.intval = -1; return BOOL; } 
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 75 "mysql.l"
{ yylval.intval = 0; return BOOL; }
	YY_BREAK
case 58:
#line 78 "mysql.l"
case 59:
YY_RULE_SETUP
#line 78 "mysql.l"
{ yylval.strval = new_strdup(yytext+1, yyleng-1); yylval.strval[yyleng-2] = 0; return STRING; }
	YY_BREAK
case 60:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 81 "mysql.l"
{ yyerror("Unterminated string %s", yytext); } 
	YY_BREAK
case 61:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 82 "mysql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 84 "mysql.l"
{ yylval.intval = strtol(yytext, NULL, 16); return INTNUM; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 85 "mysql.l"
{ yylval.intval = strtol(yytext + 2, NULL, 2); return INTNUM; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 88 "mysql.l"
{ return yytext[0]; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 89 "mysql.l"
{ return ANDOP; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 90 "mysql.l"
{ return OR; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 92 "mysql.l"
{ yylval.cmptok = CMP_E; return COMPARISON; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 93 "mysql.l"
{ yylval.cmptok = CMP_GE; return COMPARISON; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 94 "mysql.l"
{ yylval.cmptok = CMP_G; return COMPARISON; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 95 "mysql.l"
{ yylval.cmptok = CMP_LE; return COMPARISON; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 96 "mysql.l"
{ yylval.cmptok = CMP_L; return COMPARISON; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 97 "mysql.l"
{ yylval.cmptok = CMP_NE; return COMPARISON; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 99 "mysql.l"
{ yylval.strval = new_strdup(yytext, yyleng); return NAME; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 100 "mysql.l"
{ yylval.strval = new_strdup(yytext+1, yyleng - 1); yylval.strval[yyleng-2] = 0; return NAME; }
	YY_BREAK
case 75:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 101 "mysql.l"
{ yyerror("unterminated quoted name %s", yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 103 "mysql.l"
;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 104 "mysql.l"
;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 105 "mysql.l"
{ oldstate = YY_START; BEGIN COMMENT; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 106 "mysql.l"
{ BEGIN oldstate; }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 107 "mysql.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 108 "mysql.l"
{ yyerror("unclosed comment"); }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 110 "mysql.l"

	YY_BREAK
case 82:
YY_RULE_SETUP
#line 111 "mysql.l"
{ yyerror("mystery character '%c'", *yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 113 "mysql.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1464 "mysql.lex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(BTWMODE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 300 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 300 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 299);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 113 "mysql.l"



